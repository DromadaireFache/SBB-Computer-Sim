/ ~~~ THE SBB STANDARD SYNTAX ~~~ /
/ TODO: create type char
/ TODO: create type int
/ TODO: create type function
/ TODO: create type long
/ TODO: while loops, for loops
/ TODO: if/else, else if

/ *** CHAR EXPRESSION EVALUATOR *** /
@macronew
char__inc__ ..label.x..;
    lda ..x..__char__
    inc
    sta ..x..__char__
@macroend
@macronew
char__expr__ ..label.a..;
    lda ..a..__char__
@macroend
@macronew
char__expr__ ..num.a..;
    ldi ..a.0..
@macroend
@macronew
char__expr__ ..expr.a.. + ..expr.b..;
    char__expr__ ..b..;
    sta __expr0__
    char__expr__ ..a..;
    add __expr0__
@macroend
@macronew
char__expr__ ..expr.a.. - ..expr.b..;
    char__expr__ ..b..;
    sta __expr0__
    char__expr__ ..a..;
    sub __expr0__
@macroend
@macronew
char__equals__ ..label.a.. ..expr.b..;
    char__expr__ ..b..;
    sta ..a..__char__
@macroend
@macronew
char__add__ ..label.a.. ..expr.b..;
    char__expr__ ..b..;
    add ..a..__char__
    sta ..a..__char__
@macroend
@macronew
char__sub__ ..label.a.. ..expr.b..;
    char__expr__ ..b..;
    sub ..a..__char__
    multl# 255
    sta ..a..__char__
@macroend

/ *** LOOPS *** /
@macronew / repeat loop
repeat ..num.n.. times {..code.codeblock..};
    ldi ..n.0.. *__loop__?0?
    dec
    sta &&__loop__?0?
    jmpn &__end__?1?
    ..codeblock..
    jump &__loop__?0?
    ldi ..n.0.. *__end__?1?
    sta &&__loop__?0?
@macroend

/ *** BOOLEAN EXPRESSION EVALUATOR *** /
/ carry flag turned ON for FALSE and otherwise for TRUE
@macronew / equals ==
__bool__ ..label.a.. == ..label.b..;
    lda ..a..
    sub ..b..
    dec
@macroend
@macronew / greater than >
__bool__ ..label.a.. > ..label.b..;
    lda ..b..
    sub ..a..
@macroend
@macronew / less than <
__bool__ ..label.a.. < ..label.b..;
    lda ..b..
    dec
    sub ..a..
@macroend
@macronew / greater than or equal >=
__bool__ ..label.a.. >= ..label.b..;
    lda ..b..
    dec
    sub ..a..
@macroend
@macronew / less than or equal <=
__bool__ ..label.a.. <= ..label.b..;
    lda ..a..
    sub ..b..
@macroend

/ *** IF STATEMENTS *** /
@macronew / simple if
if ..expr.bool.. {..code.codeblock..};
    __bool__ ..bool..;
    jmpc &&__false__?0?
    ..codeblock..
    noop *__false__?0?
@macroend

@macronew
int__inc__ ..label.x..;
    lda &&..x..__int0__
    inc
    sta &&..x..__int0__
@macroend

/ *** VARIABLE EXPRESSIONS *** /
@macronew
..label.x..++;
    ..x.type..__inc__ ..x..;
@macroend
@macronew
..label.x.. = ..expr.y..;
    ..x.type..__equals__ ..x.. ..y..;
@macroend
@macronew
..label.x.. += ..expr.y..;
    ..x.type..__add__ ..x.. ..y..;
@macroend
@macronew
..label.x.. -= ..expr.y..;
    ..x.type..__sub__ ..x.. ..y..;
@macroend

/ *** VARIABLE CREATION *** /
@macronew
char ..label.x.. = ..expr.y..;
    @typedef ..x.. char
    char__expr__ ..y..;
    sta ..x..__char__
@macroend